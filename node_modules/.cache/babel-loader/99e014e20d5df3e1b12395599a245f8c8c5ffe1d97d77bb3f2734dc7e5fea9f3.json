{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\producao-dashboard\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport axios from 'axios';\nimport debounce from 'lodash/debounce';\nimport './App.css';\nimport jsPDF from 'jspdf';\nimport autoTable from 'jspdf-autotable';\nimport PedidoForm from './components/pedidoForm';\nimport PedidoTable from './components/PedidoTable';\nimport ModalObservacao from './components/ModalObservacao';\nimport ModalPesoVolume from './components/ModalPesoVolume';\nimport Busca from './components/Busca';\n\n// Função para formatar datas no formato YYYY-MM-DD HH:MM:SS com fuso horário America/Sao_Paulo (UTC-3)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const formatDateToLocalISO = (date, context = 'unknown') => {\n  const d = date ? new Date(date) : new Date();\n  if (isNaN(d.getTime()) || typeof date === 'string' && date.includes('undefined')) {\n    console.warn(`[formatDateToLocalISO - ${context}] Data inválida detectada, usando data atual:`, date);\n    return new Date().toLocaleString('sv-SE', {\n      timeZone: 'America/Sao_Paulo'\n    }).slice(0, 19);\n  }\n  const isoString = d.toLocaleString('sv-SE', {\n    timeZone: 'America/Sao_Paulo'\n  }).slice(0, 19);\n  console.log(`[formatDateToLocalISO - ${context}] Data capturada: ${d.toString()}, Data formatada: ${isoString}`);\n  return isoString;\n};\n\n// Função para formatar o tempo\nconst formatarTempo = tempo => {\n  if (isNaN(tempo) || tempo < 0) return '0 minutos';\n  const minutosTotais = Math.round(tempo); // Tempo já está em minutos\n  const horas = Math.floor(minutosTotais / 60);\n  const minutosRestantes = minutosTotais % 60;\n  if (horas === 0) {\n    return `${minutosRestantes} minuto${minutosRestantes !== 1 ? 's' : ''}`;\n  } else {\n    return `${horas} hora${horas !== 1 ? 's' : ''} e ${minutosRestantes} minuto${minutosRestantes !== 1 ? 's' : ''}`;\n  }\n};\nfunction App() {\n  _s();\n  const [pedidos, setPedidos] = useState([]);\n  const [pedidosAndamento, setPedidosAndamento] = useState([]);\n  const [pedidosConcluidos, setPedidosConcluidos] = useState([]);\n  const [novoPedido, setNovoPedido] = useState(() => {\n    const inicioInicial = formatDateToLocalISO(new Date(), 'novoPedido init');\n    console.log('Inicializando novoPedido com inicio:', inicioInicial);\n    return {\n      empresa: '',\n      numeroOS: '',\n      dataEntrada: '',\n      previsaoEntrega: '',\n      responsavel: '',\n      status: 'novo',\n      inicio: inicioInicial,\n      tempo: 0,\n      // Tempo em minutos\n      peso: null,\n      volume: null,\n      dataConclusao: null,\n      pausado: 0,\n      tempoPausado: 0,\n      // Tempo pausado em minutos\n      dataPausada: null,\n      dataInicioPausa: null,\n      // Novo campo para armazenar o início do período pausado\n      itens: [{\n        codigoDesenho: '',\n        quantidadePedido: ''\n      }]\n    };\n  });\n  const [pedidoParaEditar, setPedidoParaEditar] = useState(null);\n  const [mensagem, setMensagem] = useState('');\n  const [busca, setBusca] = useState('');\n  const [mostrarModal, setMostrarModal] = useState(false);\n  const [pedidoSelecionado, setPedidoSelecionado] = useState(null);\n  const [observacao, setObservacao] = useState('');\n  const [peso, setPeso] = useState('');\n  const [volume, setVolume] = useState('');\n  const [mostrarModalPesoVolume, setMostrarModalPesoVolume] = useState(false);\n  const [pedidoParaConcluir, setPedidoParaConcluir] = useState(null);\n  const [mostrarFormulario, setMostrarFormulario] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const isFetching = useRef(false);\n  const lastFetchTimestamp = useRef(0);\n  const fetchPedidos = async (dados = null) => {\n    const now = Date.now();\n    if (now - lastFetchTimestamp.current < 5000 && !dados) {\n      console.log('Ignorando chamada repetida a fetchPedidos');\n      return;\n    }\n    if (isFetching.current) return;\n    isFetching.current = true;\n    try {\n      const response = dados ? {\n        data: dados\n      } : await axios.get('http://localhost:5000/pedidos');\n      const pedidosAtualizados = response.data.map(pedido => {\n        const inicioValido = formatDateToLocalISO(pedido.inicio, `fetchPedidos - pedido ${pedido.id}`);\n        const dataConclusaoValida = pedido.dataConclusao ? formatDateToLocalISO(pedido.dataConclusao, `fetchPedidos - pedido ${pedido.id}`) : null;\n\n        // Preservar o tempo fixado ao pausar\n        const tempoFinal = pedido.status === 'concluido' ? pedido.tempo : pedido.status === 'andamento' && !pedido.pausado ? Math.round((pedido.tempoPausado || 0) + calcularTempo(inicioValido)) : pedido.tempoPausado || 0; // Usa tempoPausado se pausado\n\n        console.log(`fetchPedidos - pedido ${pedido.id}: tempoFinal = ${tempoFinal}, pausado = ${pedido.pausado}, tempoPausado = ${pedido.tempoPausado}`);\n        return {\n          ...pedido,\n          inicio: inicioValido,\n          dataConclusao: dataConclusaoValida,\n          itens: Array.isArray(pedido.itens) ? pedido.itens : [],\n          tempo: Math.round(tempoFinal) // Garantir que tempo seja em minutos inteiros\n        };\n      });\n      setPedidos(pedidosAtualizados.filter(p => p.status === 'andamento'));\n      setPedidosAndamento(pedidosAtualizados.filter(p => p.status === 'novo'));\n      setPedidosConcluidos(pedidosAtualizados.filter(p => p.status === 'concluido'));\n      setIsLoading(false);\n      lastFetchTimestamp.current = now;\n    } catch (error) {\n      console.error('Erro ao carregar pedidos:', error);\n      setMensagem('Erro ao carregar pedidos: ' + error.message);\n      setIsLoading(false);\n    } finally {\n      isFetching.current = false;\n    }\n  };\n  const carregarPedidos = useCallback(debounce(dados => {\n    fetchPedidos(dados);\n  }, 1000), []);\n  useEffect(() => {\n    carregarPedidos();\n    return () => {\n      carregarPedidos.cancel();\n    };\n  }, [carregarPedidos]);\n  useEffect(() => {\n    const intervalo = setInterval(() => {\n      setPedidos(prev => prev.map(p => {\n        if (p.status !== 'andament') {\n          console.log(`Pedido ${p.id} não está em andamento, mantendo tempo: ${p.tempo} minutos`);\n          return p; // Não atualiza o tempo se o pedido não estiver em andamento\n        }\n        if (p.pausado) {\n          console.log(`Pedido ${p.id} pausado, mantendo tempo: ${p.tempoPausado} minutos`);\n          return {\n            ...p,\n            tempo: p.tempoPausado\n          }; // Mantém o tempoPausado ao pausar\n        }\n        const inicioValido = p.inicio && !p.inicio.includes('undefined') ? p.inicio : formatDateToLocalISO(new Date(), 'intervalo');\n        let tempoAcumulado = 0;\n        let dataReferencia = inicioValido;\n        if (p.dataPausada && !p.pausado) {\n          // Após retomada, usa dataPausada como ponto de referência\n          dataReferencia = p.dataPausada;\n          tempoAcumulado = p.tempoPausado || 0; // Usa o tempo pausado como base\n          console.log(`Pedido ${p.id} retomado, usando dataPausada (${dataReferencia}) como referência, tempoAcumulado = ${tempoAcumulado}`);\n        } else {\n          // Se não há pausa, usa o tempo acumulado desde o início\n          tempoAcumulado = p.tempoPausado || 0;\n        }\n        const tempoDesdeReferencia = calcularTempo(dataReferencia, formatDateToLocalISO(new Date(), 'intervalo atual'));\n        const tempoAtual = Math.round(tempoAcumulado + tempoDesdeReferencia);\n        console.log(`Atualizando tempo para pedido ${p.id}: tempoPausado = ${tempoAcumulado}, tempoDesdeReferencia = ${tempoDesdeReferencia}, tempoAtual = ${tempoAtual} minutos (antes de setar)`);\n        return {\n          ...p,\n          tempo: tempoAtual\n        };\n      }));\n    }, 60000); // Atualiza a cada 60 segundos (1 minuto)\n    return () => clearInterval(intervalo);\n  }, []);\n  const parseDate = dateStr => {\n    if (!dateStr || typeof dateStr !== 'string' || dateStr.includes('undefined')) {\n      console.warn('Data inválida fornecida em parseDate, usando data atual:', dateStr);\n      return new Date();\n    }\n    const parsedDate = new Date(dateStr);\n    if (isNaN(parsedDate)) {\n      console.warn('Data inválida em parseDate, usando data atual:', dateStr);\n      return new Date();\n    }\n    return parsedDate;\n  };\n  const calcularTempo = (inicio, fim = formatDateToLocalISO(new Date(), 'calcularTempo')) => {\n    const inicioDate = parseDate(inicio);\n    const fimDate = parseDate(fim);\n    if (isNaN(inicioDate) || isNaN(fimDate)) {\n      console.error('Data inválida em calcularTempo:', {\n        inicio,\n        fim\n      });\n      return 0;\n    }\n    const diffMs = fimDate - inicioDate;\n    return diffMs < 0 ? 0 : diffMs / (1000 * 60); // Retorna em minutos\n  };\n  const exportarPDF = () => {\n    const doc = new jsPDF();\n    const headersAndamento = ['Empresa', 'Nº OS', 'Data Entrada', 'Previsão', 'Responsável', 'Início', 'Tempo'];\n    const headersNovos = ['Empresa', 'Nº OS', 'Data Entrada', 'Previsão', 'Responsável', 'Início', 'Tempo'];\n    const headersConcluidos = ['Empresa', 'Nº OS', 'Data Entrada', 'Previsão', 'Responsável', 'Início e Conclusão', 'Tempo'];\n    const addTable = (title, data, headers) => {\n      doc.text(title, 14, 20);\n      autoTable(doc, {\n        head: [headers],\n        body: data.map(p => [p.empresa, p.numeroOS, p.dataEntrada ? new Date(p.dataEntrada).toLocaleDateString('pt-BR') : 'Não informado', p.previsaoEntrega ? new Date(p.previsaoEntrega).toLocaleDateString('pt-BR') : 'Não informado', p.responsavel, p.status === 'concluido' ? `${formatarDataHora(p.inicio)}\\n${formatarDataHora(p.dataConclusao) || 'Não concluído'}` : formatarDataHora(p.inicio), formatarTempo(p.tempo) // Exibe o tempo em minutos ou horas e minutos\n        ]),\n        startY: 30\n      });\n    };\n    addTable('Pedidos em Andamento', pedidos, headersAndamento);\n    doc.addPage();\n    addTable('Pedidos Novos', pedidosAndamento, headersNovos);\n    doc.addPage();\n    addTable('Pedidos Concluídos', pedidosConcluidos, headersConcluidos);\n    doc.save('pedidos_controle_producao.pdf');\n  };\n  const formatarDataHora = data => {\n    return data ? parseDate(data).toLocaleString('pt-BR', {\n      timeZone: 'America/Sao_Paulo'\n    }) : 'Não informado';\n  };\n  const moverParaAndamento = async id => {\n    const pedido = [...pedidos, ...pedidosAndamento, ...pedidosConcluidos].find(p => p.id === id);\n    if (pedido) {\n      const novoInicio = formatDateToLocalISO(new Date(), 'moverParaAndamento');\n      const pedidoAtualizado = {\n        ...pedido,\n        status: 'andamento',\n        inicio: novoInicio,\n        tempo: 0,\n        tempoPausado: 0,\n        dataPausada: null,\n        dataInicioPausa: null,\n        pausado: 0\n      };\n      try {\n        console.log('Enviando pedido atualizado para andamento:', pedidoAtualizado);\n        const resposta = await axios.put(`http://localhost:5000/pedidos/${id}`, pedidoAtualizado);\n        const pedidoMovido = {\n          ...resposta.data,\n          tempo: 0\n        };\n        await axios.post('http://localhost:5000/enviar-email', {\n          pedido: pedidoMovido,\n          observacao: ''\n        });\n        setPedidosAndamento(prev => prev.filter(p => p.id !== id));\n        setPedidos(prev => [...prev.filter(p => p.id !== id), pedidoMovido]);\n        setPedidosConcluidos(prev => prev.filter(p => p.id !== id));\n        setMensagem('Pedido movido para \"Em Andamento\" e e-mail enviado.');\n        carregarPedidos();\n      } catch (error) {\n        setMensagem('Erro ao mover pedido: ' + (error.response ? error.response.data.message : error.message));\n        carregarPedidos();\n      }\n    }\n  };\n  const pausarPedido = async id => {\n    const pedido = pedidos.find(p => p.id === id);\n    if (pedido) {\n      const tempoAtual = pedido.tempo; // Salva o tempo atual como tempoPausado\n      const dataPausada = formatDateToLocalISO(new Date(), 'pausarPedido');\n      const dataInicioPausa = formatDateToLocalISO(new Date(), 'inicioPausa');\n      const pedidoPausado = {\n        ...pedido,\n        pausado: 1,\n        tempoPausado: tempoAtual,\n        dataPausada,\n        dataInicioPausa,\n        tempo: tempoAtual\n      };\n      try {\n        console.log('Pausando pedido:', pedidoPausado);\n        await axios.put(`http://localhost:5000/pedidos/${id}`, pedidoPausado);\n        setPedidos(prev => prev.map(p => p.id === id ? pedidoPausado : p));\n        setMensagem('Pedido pausado com sucesso.');\n        carregarPedidos();\n      } catch (error) {\n        setMensagem('Erro ao pausar pedido: ' + error.message);\n        carregarPedidos();\n      }\n    }\n  };\n  const retomarPedido = async id => {\n    const pedido = pedidos.find(p => p.id === id);\n    if (pedido) {\n      const dataRetomada = formatDateToLocalISO(new Date(), 'retomarPedido');\n      const tempoPausadoAnterior = pedido.tempoPausado || 0;\n      console.log(`Retomando pedido ${id}: tempoPausado = ${tempoPausadoAnterior}, tempo atual antes = ${pedido.tempo}`);\n      const pedidoRetomado = {\n        ...pedido,\n        pausado: 0,\n        dataPausada: dataRetomada,\n        dataInicioPausa: null\n      };\n      try {\n        const resposta = await axios.put(`http://localhost:5000/pedidos/${id}`, pedidoRetomado);\n        const tempoAtualizado = tempoPausadoAnterior; // Preserva o tempo pausado como ponto de partida\n        setPedidos(prev => prev.map(p => p.id === id ? {\n          ...resposta.data,\n          tempo: tempoAtualizado\n        } : p));\n        console.log(`Tempo após retomar para pedido ${id}: ${tempoAtualizado} minutos`);\n        setMensagem('Pedido retomado com sucesso.');\n        carregarPedidos();\n      } catch (error) {\n        setMensagem('Erro ao retomar pedido: ' + error.message);\n        carregarPedidos();\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/logoNF.jpg\",\n        alt: \"Logo\",\n        className: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Controle de Produ\\xE7\\xE3o\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn-desenho\",\n        onClick: () => window.open('https://drive.google.com/drive/folders/1vzemVbLeotHD0xirxUPsvNb9qBccQFcd?usp=sharing', '_blank'),\n        children: \"DESENHO\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 7\n    }, this), mensagem && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: mensagem.includes('Erro') ? 'erro' : 'sucesso',\n      children: mensagem\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 20\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Carregando pedidos...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn-adicionar-pedido\",\n      onClick: () => setMostrarFormulario(true),\n      children: \"Adicionar Pedido Novo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 7\n    }, this), mostrarFormulario && /*#__PURE__*/_jsxDEV(PedidoForm, {\n      novoPedido: novoPedido,\n      setNovoPedido: setNovoPedido,\n      pedidoParaEditar: pedidoParaEditar,\n      setPedidoParaEditar: setPedidoParaEditar,\n      setMostrarFormulario: setMostrarFormulario,\n      setMensagem: setMensagem,\n      carregarPedidos: carregarPedidos,\n      setPedidos: setPedidos,\n      setPedidosAndamento: setPedidosAndamento,\n      setPedidosConcluidos: setPedidosConcluidos,\n      setMostrarModalPesoVolume: setMostrarModalPesoVolume,\n      setPedidoParaConcluir: setPedidoParaConcluir,\n      moverParaAndamento: moverParaAndamento,\n      formatDateToLocalISO: formatDateToLocalISO\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Busca, {\n      busca: busca,\n      setBusca: setBusca,\n      carregarPedidos: carregarPedidos,\n      todosPedidos: [...pedidos, ...pedidosAndamento, ...pedidosConcluidos],\n      exportarPDF: exportarPDF\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Pedidos em Andamento\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PedidoTable, {\n      pedidos: pedidos,\n      tipo: \"andamento\",\n      setPedidos: setPedidos,\n      setPedidosAndamento: setPedidosAndamento,\n      setPedidosConcluidos: setPedidosConcluidos,\n      setMensagem: setMensagem,\n      setPedidoParaEditar: setPedidoParaEditar,\n      setNovoPedido: setNovoPedido,\n      setMostrarFormulario: setMostrarFormulario,\n      setMostrarModal: setMostrarModal,\n      setPedidoSelecionado: setPedidoSelecionado,\n      setMostrarModalPesoVolume: setMostrarModalPesoVolume,\n      setPedidoParaConcluir: setPedidoParaConcluir,\n      busca: busca,\n      carregarPedidos: carregarPedidos,\n      moverParaAndamento: moverParaAndamento,\n      pausarPedido: pausarPedido,\n      retomarPedido: retomarPedido,\n      formatarTempo: formatarTempo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Pedidos Novos\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PedidoTable, {\n      pedidos: pedidosAndamento,\n      tipo: \"novo\",\n      setPedidos: setPedidos,\n      setPedidosAndamento: setPedidosAndamento,\n      setPedidosConcluidos: setPedidosConcluidos,\n      setMensagem: setMensagem,\n      setPedidoParaEditar: setPedidoParaEditar,\n      setNovoPedido: setNovoPedido,\n      setMostrarFormulario: setMostrarFormulario,\n      setMostrarModal: setMostrarModal,\n      setPedidoSelecionado: setPedidoSelecionado,\n      setMostrarModalPesoVolume: setMostrarModalPesoVolume,\n      setPedidoParaConcluir: setPedidoParaConcluir,\n      busca: busca,\n      carregarPedidos: carregarPedidos,\n      moverParaAndamento: moverParaAndamento,\n      formatarTempo: formatarTempo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Pedidos Conclu\\xEDdos\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PedidoTable, {\n      pedidos: pedidosConcluidos,\n      tipo: \"concluido\",\n      setPedidos: setPedidos,\n      setPedidosAndamento: setPedidosAndamento,\n      setPedidosConcluidos: setPedidosConcluidos,\n      setMensagem: setMensagem,\n      setPedidoParaEditar: setPedidoParaEditar,\n      setNovoPedido: setNovoPedido,\n      setMostrarFormulario: setMostrarFormulario,\n      setMostrarModal: setMostrarModal,\n      setPedidoSelecionado: setPedidoSelecionado,\n      setMostrarModalPesoVolume: setMostrarModalPesoVolume,\n      setPedidoParaConcluir: setPedidoParaConcluir,\n      busca: busca,\n      carregarPedidos: carregarPedidos,\n      formatarTempo: formatarTempo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 7\n    }, this), mostrarModal && /*#__PURE__*/_jsxDEV(ModalObservacao, {\n      pedidoSelecionado: pedidoSelecionado,\n      observacao: observacao,\n      setObservacao: setObservacao,\n      setMostrarModal: setMostrarModal,\n      setMensagem: setMensagem\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 9\n    }, this), mostrarModalPesoVolume && /*#__PURE__*/_jsxDEV(ModalPesoVolume, {\n      pedidoParaConcluir: pedidoParaConcluir,\n      peso: peso,\n      setPeso: setPeso,\n      volume: volume,\n      setVolume: setVolume,\n      setMostrarModalPesoVolume: setMostrarModalPesoVolume,\n      setPedidoParaConcluir: setPedidoParaConcluir,\n      setPedidos: setPedidos,\n      setPedidosConcluidos: setPedidosConcluidos,\n      setMensagem: setMensagem,\n      carregarPedidos: carregarPedidos\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 320,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"hKUiHmy9hjrgRIqNQ3VYaBbuURQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","axios","debounce","jsPDF","autoTable","PedidoForm","PedidoTable","ModalObservacao","ModalPesoVolume","Busca","jsxDEV","_jsxDEV","formatDateToLocalISO","date","context","d","Date","isNaN","getTime","includes","console","warn","toLocaleString","timeZone","slice","isoString","log","toString","formatarTempo","tempo","minutosTotais","Math","round","horas","floor","minutosRestantes","App","_s","pedidos","setPedidos","pedidosAndamento","setPedidosAndamento","pedidosConcluidos","setPedidosConcluidos","novoPedido","setNovoPedido","inicioInicial","empresa","numeroOS","dataEntrada","previsaoEntrega","responsavel","status","inicio","peso","volume","dataConclusao","pausado","tempoPausado","dataPausada","dataInicioPausa","itens","codigoDesenho","quantidadePedido","pedidoParaEditar","setPedidoParaEditar","mensagem","setMensagem","busca","setBusca","mostrarModal","setMostrarModal","pedidoSelecionado","setPedidoSelecionado","observacao","setObservacao","setPeso","setVolume","mostrarModalPesoVolume","setMostrarModalPesoVolume","pedidoParaConcluir","setPedidoParaConcluir","mostrarFormulario","setMostrarFormulario","isLoading","setIsLoading","isFetching","lastFetchTimestamp","fetchPedidos","dados","now","current","response","data","get","pedidosAtualizados","map","pedido","inicioValido","id","dataConclusaoValida","tempoFinal","calcularTempo","Array","isArray","filter","p","error","message","carregarPedidos","cancel","intervalo","setInterval","prev","tempoAcumulado","dataReferencia","tempoDesdeReferencia","tempoAtual","clearInterval","parseDate","dateStr","parsedDate","fim","inicioDate","fimDate","diffMs","exportarPDF","doc","headersAndamento","headersNovos","headersConcluidos","addTable","title","headers","text","head","body","toLocaleDateString","formatarDataHora","startY","addPage","save","moverParaAndamento","find","novoInicio","pedidoAtualizado","resposta","put","pedidoMovido","post","pausarPedido","pedidoPausado","retomarPedido","dataRetomada","tempoPausadoAnterior","pedidoRetomado","tempoAtualizado","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","window","open","todosPedidos","tipo","_c","$RefreshReg$"],"sources":["C:/Users/User/producao-dashboard/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport axios from 'axios';\nimport debounce from 'lodash/debounce';\nimport './App.css';\nimport jsPDF from 'jspdf';\nimport autoTable from 'jspdf-autotable';\nimport PedidoForm from './components/pedidoForm';\nimport PedidoTable from './components/PedidoTable';\nimport ModalObservacao from './components/ModalObservacao';\nimport ModalPesoVolume from './components/ModalPesoVolume';\nimport Busca from './components/Busca';\n\n// Função para formatar datas no formato YYYY-MM-DD HH:MM:SS com fuso horário America/Sao_Paulo (UTC-3)\nexport const formatDateToLocalISO = (date, context = 'unknown') => {\n  const d = date ? new Date(date) : new Date();\n  if (isNaN(d.getTime()) || (typeof date === 'string' && date.includes('undefined'))) {\n    console.warn(`[formatDateToLocalISO - ${context}] Data inválida detectada, usando data atual:`, date);\n    return new Date().toLocaleString('sv-SE', { timeZone: 'America/Sao_Paulo' }).slice(0, 19);\n  }\n  const isoString = d.toLocaleString('sv-SE', { timeZone: 'America/Sao_Paulo' }).slice(0, 19);\n  console.log(`[formatDateToLocalISO - ${context}] Data capturada: ${d.toString()}, Data formatada: ${isoString}`);\n  return isoString;\n};\n\n// Função para formatar o tempo\nconst formatarTempo = (tempo) => {\n  if (isNaN(tempo) || tempo < 0) return '0 minutos';\n  const minutosTotais = Math.round(tempo); // Tempo já está em minutos\n  const horas = Math.floor(minutosTotais / 60);\n  const minutosRestantes = minutosTotais % 60;\n\n  if (horas === 0) {\n    return `${minutosRestantes} minuto${minutosRestantes !== 1 ? 's' : ''}`;\n  } else {\n    return `${horas} hora${horas !== 1 ? 's' : ''} e ${minutosRestantes} minuto${minutosRestantes !== 1 ? 's' : ''}`;\n  }\n};\n\nfunction App() {\n  const [pedidos, setPedidos] = useState([]);\n  const [pedidosAndamento, setPedidosAndamento] = useState([]);\n  const [pedidosConcluidos, setPedidosConcluidos] = useState([]);\n  const [novoPedido, setNovoPedido] = useState(() => {\n    const inicioInicial = formatDateToLocalISO(new Date(), 'novoPedido init');\n    console.log('Inicializando novoPedido com inicio:', inicioInicial);\n    return {\n      empresa: '',\n      numeroOS: '',\n      dataEntrada: '',\n      previsaoEntrega: '',\n      responsavel: '',\n      status: 'novo',\n      inicio: inicioInicial,\n      tempo: 0, // Tempo em minutos\n      peso: null,\n      volume: null,\n      dataConclusao: null,\n      pausado: 0,\n      tempoPausado: 0, // Tempo pausado em minutos\n      dataPausada: null,\n      dataInicioPausa: null, // Novo campo para armazenar o início do período pausado\n      itens: [{ codigoDesenho: '', quantidadePedido: '' }],\n    };\n  });\n  const [pedidoParaEditar, setPedidoParaEditar] = useState(null);\n  const [mensagem, setMensagem] = useState('');\n  const [busca, setBusca] = useState('');\n  const [mostrarModal, setMostrarModal] = useState(false);\n  const [pedidoSelecionado, setPedidoSelecionado] = useState(null);\n  const [observacao, setObservacao] = useState('');\n  const [peso, setPeso] = useState('');\n  const [volume, setVolume] = useState('');\n  const [mostrarModalPesoVolume, setMostrarModalPesoVolume] = useState(false);\n  const [pedidoParaConcluir, setPedidoParaConcluir] = useState(null);\n  const [mostrarFormulario, setMostrarFormulario] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const isFetching = useRef(false);\n  const lastFetchTimestamp = useRef(0);\n\n  const fetchPedidos = async (dados = null) => {\n    const now = Date.now();\n    if (now - lastFetchTimestamp.current < 5000 && !dados) {\n      console.log('Ignorando chamada repetida a fetchPedidos');\n      return;\n    }\n\n    if (isFetching.current) return;\n    isFetching.current = true;\n    try {\n      const response = dados ? { data: dados } : await axios.get('http://localhost:5000/pedidos');\n      const pedidosAtualizados = response.data.map((pedido) => {\n        const inicioValido = formatDateToLocalISO(pedido.inicio, `fetchPedidos - pedido ${pedido.id}`);\n        const dataConclusaoValida = pedido.dataConclusao\n          ? formatDateToLocalISO(pedido.dataConclusao, `fetchPedidos - pedido ${pedido.id}`)\n          : null;\n\n        // Preservar o tempo fixado ao pausar\n        const tempoFinal = pedido.status === 'concluido' ? pedido.tempo : \n          (pedido.status === 'andamento' && !pedido.pausado\n            ? Math.round((pedido.tempoPausado || 0) + calcularTempo(inicioValido))\n            : pedido.tempoPausado || 0); // Usa tempoPausado se pausado\n\n        console.log(`fetchPedidos - pedido ${pedido.id}: tempoFinal = ${tempoFinal}, pausado = ${pedido.pausado}, tempoPausado = ${pedido.tempoPausado}`);\n\n        return {\n          ...pedido,\n          inicio: inicioValido,\n          dataConclusao: dataConclusaoValida,\n          itens: Array.isArray(pedido.itens) ? pedido.itens : [],\n          tempo: Math.round(tempoFinal), // Garantir que tempo seja em minutos inteiros\n        };\n      });\n      setPedidos(pedidosAtualizados.filter((p) => p.status === 'andamento'));\n      setPedidosAndamento(pedidosAtualizados.filter((p) => p.status === 'novo'));\n      setPedidosConcluidos(pedidosAtualizados.filter((p) => p.status === 'concluido'));\n      setIsLoading(false);\n      lastFetchTimestamp.current = now;\n    } catch (error) {\n      console.error('Erro ao carregar pedidos:', error);\n      setMensagem('Erro ao carregar pedidos: ' + error.message);\n      setIsLoading(false);\n    } finally {\n      isFetching.current = false;\n    }\n  };\n\n  const carregarPedidos = useCallback(debounce((dados) => {\n    fetchPedidos(dados);\n  }, 1000), []);\n\n  useEffect(() => {\n    carregarPedidos();\n    return () => {\n      carregarPedidos.cancel();\n    };\n  }, [carregarPedidos]);\n\n  useEffect(() => {\n    const intervalo = setInterval(() => {\n      setPedidos((prev) =>\n        prev.map((p) => {\n          if (p.status !== 'andament') {\n            console.log(`Pedido ${p.id} não está em andamento, mantendo tempo: ${p.tempo} minutos`);\n            return p; // Não atualiza o tempo se o pedido não estiver em andamento\n          }\n\n          if (p.pausado) {\n            console.log(`Pedido ${p.id} pausado, mantendo tempo: ${p.tempoPausado} minutos`);\n            return { ...p, tempo: p.tempoPausado }; // Mantém o tempoPausado ao pausar\n          }\n\n          const inicioValido = p.inicio && !p.inicio.includes('undefined')\n            ? p.inicio\n            : formatDateToLocalISO(new Date(), 'intervalo');\n\n          let tempoAcumulado = 0;\n          let dataReferencia = inicioValido;\n\n          if (p.dataPausada && !p.pausado) {\n            // Após retomada, usa dataPausada como ponto de referência\n            dataReferencia = p.dataPausada;\n            tempoAcumulado = p.tempoPausado || 0; // Usa o tempo pausado como base\n            console.log(`Pedido ${p.id} retomado, usando dataPausada (${dataReferencia}) como referência, tempoAcumulado = ${tempoAcumulado}`);\n          } else {\n            // Se não há pausa, usa o tempo acumulado desde o início\n            tempoAcumulado = p.tempoPausado || 0;\n          }\n\n          const tempoDesdeReferencia = calcularTempo(dataReferencia, formatDateToLocalISO(new Date(), 'intervalo atual'));\n          const tempoAtual = Math.round(tempoAcumulado + tempoDesdeReferencia);\n\n          console.log(`Atualizando tempo para pedido ${p.id}: tempoPausado = ${tempoAcumulado}, tempoDesdeReferencia = ${tempoDesdeReferencia}, tempoAtual = ${tempoAtual} minutos (antes de setar)`);\n          return {\n            ...p,\n            tempo: tempoAtual,\n          };\n        })\n      );\n    }, 60000); // Atualiza a cada 60 segundos (1 minuto)\n    return () => clearInterval(intervalo);\n  }, []);\n\n  const parseDate = (dateStr) => {\n    if (!dateStr || typeof dateStr !== 'string' || dateStr.includes('undefined')) {\n      console.warn('Data inválida fornecida em parseDate, usando data atual:', dateStr);\n      return new Date();\n    }\n    const parsedDate = new Date(dateStr);\n    if (isNaN(parsedDate)) {\n      console.warn('Data inválida em parseDate, usando data atual:', dateStr);\n      return new Date();\n    }\n    return parsedDate;\n  };\n\n  const calcularTempo = (inicio, fim = formatDateToLocalISO(new Date(), 'calcularTempo')) => {\n    const inicioDate = parseDate(inicio);\n    const fimDate = parseDate(fim);\n    if (isNaN(inicioDate) || isNaN(fimDate)) {\n      console.error('Data inválida em calcularTempo:', { inicio, fim });\n      return 0;\n    }\n    const diffMs = fimDate - inicioDate;\n    return diffMs < 0 ? 0 : diffMs / (1000 * 60); // Retorna em minutos\n  };\n\n  const exportarPDF = () => {\n    const doc = new jsPDF();\n    const headersAndamento = ['Empresa', 'Nº OS', 'Data Entrada', 'Previsão', 'Responsável', 'Início', 'Tempo'];\n    const headersNovos = ['Empresa', 'Nº OS', 'Data Entrada', 'Previsão', 'Responsável', 'Início', 'Tempo'];\n    const headersConcluidos = ['Empresa', 'Nº OS', 'Data Entrada', 'Previsão', 'Responsável', 'Início e Conclusão', 'Tempo'];\n\n    const addTable = (title, data, headers) => {\n      doc.text(title, 14, 20);\n      autoTable(doc, {\n        head: [headers],\n        body: data.map((p) => [\n          p.empresa,\n          p.numeroOS,\n          p.dataEntrada ? new Date(p.dataEntrada).toLocaleDateString('pt-BR') : 'Não informado',\n          p.previsaoEntrega ? new Date(p.previsaoEntrega).toLocaleDateString('pt-BR') : 'Não informado',\n          p.responsavel,\n          p.status === 'concluido' ? `${formatarDataHora(p.inicio)}\\n${formatarDataHora(p.dataConclusao) || 'Não concluído'}` : formatarDataHora(p.inicio),\n          formatarTempo(p.tempo), // Exibe o tempo em minutos ou horas e minutos\n        ]),\n        startY: 30,\n      });\n    };\n\n    addTable('Pedidos em Andamento', pedidos, headersAndamento);\n    doc.addPage();\n    addTable('Pedidos Novos', pedidosAndamento, headersNovos);\n    doc.addPage();\n    addTable('Pedidos Concluídos', pedidosConcluidos, headersConcluidos);\n    doc.save('pedidos_controle_producao.pdf');\n  };\n\n  const formatarDataHora = (data) => {\n    return data ? parseDate(data).toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' }) : 'Não informado';\n  };\n\n  const moverParaAndamento = async (id) => {\n    const pedido = [...pedidos, ...pedidosAndamento, ...pedidosConcluidos].find((p) => p.id === id);\n    if (pedido) {\n      const novoInicio = formatDateToLocalISO(new Date(), 'moverParaAndamento');\n      const pedidoAtualizado = { \n        ...pedido, \n        status: 'andamento', \n        inicio: novoInicio,\n        tempo: 0,\n        tempoPausado: 0,\n        dataPausada: null,\n        dataInicioPausa: null,\n        pausado: 0\n      };\n      try {\n        console.log('Enviando pedido atualizado para andamento:', pedidoAtualizado);\n        const resposta = await axios.put(`http://localhost:5000/pedidos/${id}`, pedidoAtualizado);\n        const pedidoMovido = { ...resposta.data, tempo: 0 };\n        await axios.post('http://localhost:5000/enviar-email', { pedido: pedidoMovido, observacao: '' });\n        setPedidosAndamento((prev) => prev.filter((p) => p.id !== id));\n        setPedidos((prev) => [...prev.filter((p) => p.id !== id), pedidoMovido]);\n        setPedidosConcluidos((prev) => prev.filter((p) => p.id !== id));\n        setMensagem('Pedido movido para \"Em Andamento\" e e-mail enviado.');\n        carregarPedidos();\n      } catch (error) {\n        setMensagem('Erro ao mover pedido: ' + (error.response ? error.response.data.message : error.message));\n        carregarPedidos();\n      }\n    }\n  };\n\n  const pausarPedido = async (id) => {\n    const pedido = pedidos.find((p) => p.id === id);\n    if (pedido) {\n      const tempoAtual = pedido.tempo; // Salva o tempo atual como tempoPausado\n      const dataPausada = formatDateToLocalISO(new Date(), 'pausarPedido');\n      const dataInicioPausa = formatDateToLocalISO(new Date(), 'inicioPausa');\n      const pedidoPausado = { ...pedido, pausado: 1, tempoPausado: tempoAtual, dataPausada, dataInicioPausa, tempo: tempoAtual };\n      try {\n        console.log('Pausando pedido:', pedidoPausado);\n        await axios.put(`http://localhost:5000/pedidos/${id}`, pedidoPausado);\n        setPedidos((prev) => prev.map((p) => (p.id === id ? pedidoPausado : p)));\n        setMensagem('Pedido pausado com sucesso.');\n        carregarPedidos();\n      } catch (error) {\n        setMensagem('Erro ao pausar pedido: ' + error.message);\n        carregarPedidos();\n      }\n    }\n  };\n\n  const retomarPedido = async (id) => {\n    const pedido = pedidos.find((p) => p.id === id);\n    if (pedido) {\n      const dataRetomada = formatDateToLocalISO(new Date(), 'retomarPedido');\n      const tempoPausadoAnterior = pedido.tempoPausado || 0;\n      console.log(`Retomando pedido ${id}: tempoPausado = ${tempoPausadoAnterior}, tempo atual antes = ${pedido.tempo}`);\n      const pedidoRetomado = { ...pedido, pausado: 0, dataPausada: dataRetomada, dataInicioPausa: null };\n      try {\n        const resposta = await axios.put(`http://localhost:5000/pedidos/${id}`, pedidoRetomado);\n        const tempoAtualizado = tempoPausadoAnterior; // Preserva o tempo pausado como ponto de partida\n        setPedidos((prev) =>\n          prev.map((p) =>\n            p.id === id ? { ...resposta.data, tempo: tempoAtualizado } : p\n          )\n        );\n        console.log(`Tempo após retomar para pedido ${id}: ${tempoAtualizado} minutos`);\n        setMensagem('Pedido retomado com sucesso.');\n        carregarPedidos();\n      } catch (error) {\n        setMensagem('Erro ao retomar pedido: ' + error.message);\n        carregarPedidos();\n      }\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"header\">\n        <img src=\"/logoNF.jpg\" alt=\"Logo\" className=\"logo\" />\n        <h1>Controle de Produção</h1>\n        <button className=\"btn-desenho\" onClick={() => window.open('https://drive.google.com/drive/folders/1vzemVbLeotHD0xirxUPsvNb9qBccQFcd?usp=sharing', '_blank')}>\n          DESENHO\n        </button>\n      </div>\n\n      {mensagem && <p className={mensagem.includes('Erro') ? 'erro' : 'sucesso'}>{mensagem}</p>}\n      {isLoading && <p>Carregando pedidos...</p>}\n\n      <button className=\"btn-adicionar-pedido\" onClick={() => setMostrarFormulario(true)}>Adicionar Pedido Novo</button>\n      {mostrarFormulario && (\n        <PedidoForm\n          novoPedido={novoPedido}\n          setNovoPedido={setNovoPedido}\n          pedidoParaEditar={pedidoParaEditar}\n          setPedidoParaEditar={setPedidoParaEditar}\n          setMostrarFormulario={setMostrarFormulario}\n          setMensagem={setMensagem}\n          carregarPedidos={carregarPedidos}\n          setPedidos={setPedidos}\n          setPedidosAndamento={setPedidosAndamento}\n          setPedidosConcluidos={setPedidosConcluidos}\n          setMostrarModalPesoVolume={setMostrarModalPesoVolume}\n          setPedidoParaConcluir={setPedidoParaConcluir}\n          moverParaAndamento={moverParaAndamento}\n          formatDateToLocalISO={formatDateToLocalISO}\n        />\n      )}\n\n      <Busca\n        busca={busca}\n        setBusca={setBusca}\n        carregarPedidos={carregarPedidos}\n        todosPedidos={[...pedidos, ...pedidosAndamento, ...pedidosConcluidos]}\n        exportarPDF={exportarPDF}\n      />\n\n      <h2>Pedidos em Andamento</h2>\n      <PedidoTable\n        pedidos={pedidos}\n        tipo=\"andamento\"\n        setPedidos={setPedidos}\n        setPedidosAndamento={setPedidosAndamento}\n        setPedidosConcluidos={setPedidosConcluidos}\n        setMensagem={setMensagem}\n        setPedidoParaEditar={setPedidoParaEditar}\n        setNovoPedido={setNovoPedido}\n        setMostrarFormulario={setMostrarFormulario}\n        setMostrarModal={setMostrarModal}\n        setPedidoSelecionado={setPedidoSelecionado}\n        setMostrarModalPesoVolume={setMostrarModalPesoVolume}\n        setPedidoParaConcluir={setPedidoParaConcluir}\n        busca={busca}\n        carregarPedidos={carregarPedidos}\n        moverParaAndamento={moverParaAndamento}\n        pausarPedido={pausarPedido}\n        retomarPedido={retomarPedido}\n        formatarTempo={formatarTempo}\n      />\n\n      <h2>Pedidos Novos</h2>\n      <PedidoTable\n        pedidos={pedidosAndamento}\n        tipo=\"novo\"\n        setPedidos={setPedidos}\n        setPedidosAndamento={setPedidosAndamento}\n        setPedidosConcluidos={setPedidosConcluidos}\n        setMensagem={setMensagem}\n        setPedidoParaEditar={setPedidoParaEditar}\n        setNovoPedido={setNovoPedido}\n        setMostrarFormulario={setMostrarFormulario}\n        setMostrarModal={setMostrarModal}\n        setPedidoSelecionado={setPedidoSelecionado}\n        setMostrarModalPesoVolume={setMostrarModalPesoVolume}\n        setPedidoParaConcluir={setPedidoParaConcluir}\n        busca={busca}\n        carregarPedidos={carregarPedidos}\n        moverParaAndamento={moverParaAndamento}\n        formatarTempo={formatarTempo}\n      />\n\n      <h2>Pedidos Concluídos</h2>\n      <PedidoTable\n        pedidos={pedidosConcluidos}\n        tipo=\"concluido\"\n        setPedidos={setPedidos}\n        setPedidosAndamento={setPedidosAndamento}\n        setPedidosConcluidos={setPedidosConcluidos}\n        setMensagem={setMensagem}\n        setPedidoParaEditar={setPedidoParaEditar}\n        setNovoPedido={setNovoPedido}\n        setMostrarFormulario={setMostrarFormulario}\n        setMostrarModal={setMostrarModal}\n        setPedidoSelecionado={setPedidoSelecionado}\n        setMostrarModalPesoVolume={setMostrarModalPesoVolume}\n        setPedidoParaConcluir={setPedidoParaConcluir}\n        busca={busca}\n        carregarPedidos={carregarPedidos}\n        formatarTempo={formatarTempo}\n      />\n\n      {mostrarModal && (\n        <ModalObservacao\n          pedidoSelecionado={pedidoSelecionado}\n          observacao={observacao}\n          setObservacao={setObservacao}\n          setMostrarModal={setMostrarModal}\n          setMensagem={setMensagem}\n        />\n      )}\n\n      {mostrarModalPesoVolume && (\n        <ModalPesoVolume\n          pedidoParaConcluir={pedidoParaConcluir}\n          peso={peso}\n          setPeso={setPeso}\n          volume={volume}\n          setVolume={setVolume}\n          setMostrarModalPesoVolume={setMostrarModalPesoVolume}\n          setPedidoParaConcluir={setPedidoParaConcluir}\n          setPedidos={setPedidos}\n          setPedidosConcluidos={setPedidosConcluidos}\n          setMensagem={setMensagem}\n          carregarPedidos={carregarPedidos}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}